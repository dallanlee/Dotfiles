[user]
	name = Dallan Clawson
	email = dallan.clawson@gmail.com
	useconfigonly = true

[github]
	user = dallanlee

[credential]
	helper = osxkeychain

[log]
	date = relative

[format]
	pretty = format:%C(yellow)%h %Cblue%>(15)%ad %Cgreen%<(15)%aN%Cred%d %Creset%s

[help]
	autocorrect = 1

[pull]
	rebase = false

[column]
	ui = auto

[color]
	pager = true
	ui = true
	status = auto
	diff = auto
	branch = auto
	showBranch = auto
	interactive = auto
	grep = auto

[color "status"]
	header = black bold
	branch = cyan
	nobranch = red
	unmerged = red
	untracked = cyan
	added = green
	changed = red bold

[color "diff"]
	meta = red bold
	frag = black bold
	func = blue
	old = red strike
	new = green
	commit = blue
	whitespace = red
	context = normal

[color "branch"]
	current = cyan
	local = blue
	remote = magenta
	upstream = magenta
	plain = normal

[color "decorate"]
	branch = blue
	remoteBranch = magenta
	tag = magenta
	stash = cyan
	HEAD = blue

[color "interactive"]
	prompt = red
	header = red bold
	error = red
	help = black bold

[color "grep"]
	context = normal
	match = cyan
	filename = blue
	function = blue
	selected = normal
	separator = red bold
	linenumber = normal

[alias]
	# add
	a = add                           # add
	chunkyadd = add --patch           # stage commits chunk by chunk

	# via http://blog.apiaxle.com/post/handy-git-tips-to-stop-you-getting-fired/
	snapshot = !git stash save "snapshot: $(date)" && git stash apply "stash@{0}"
	snapshots = !git stash list --grep snapshot

	#via http://stackoverflow.com/questions/5188320/how-can-i-get-a-list-of-git-branches-ordered-by-most-recent-commit
	recent-branches = !git for-each-ref --count=15 --sort=-committerdate refs/heads/ --format='%(refname:short)'

	# branch
	b = branch -v                     # branch (verbose)

	# commit
	c = commit -m                     # commit with message
	ca = commit -am                   # commit all with message
	ci = commit                       # commit
	amend = commit --amend            # ammend your last commit
	ammend = commit --amend           # ammend your last commit

	# checkout
	co = checkout                     # checkout
	nb = checkout -b                  # create and switch to a new branch (mnemonic: "git new branch branchname...")

	# cherry-pick
	cp = cherry-pick -x               # grab a change from a branch

	# diff
	d = diff                          # diff unstaged changes
	dc = diff --cached                # diff staged changes
	last = diff HEAD^                 # diff last committed change

	# log
	l = log --graph --date=short
	changes = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\" --name-status
	short = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\"
	simple = log --pretty=format:\" * %s\"
	shortnocolor = log --pretty=format:\"%h %cr %cn %s\"

	# pull
	pl = pull                         # pull

	# push
	ps = push                         # push

	# rebase
	rc = rebase --continue            # continue rebase
	rs = rebase --skip                # skip rebase

	# remote
	r = remote -v                     # show remotes (verbose)

	# reset
	unstage = reset HEAD              # remove files from index (tracking)
	uncommit = reset --soft HEAD^     # go back before last commit, with files in uncommitted state
	filelog = log -u                  # show changes to a file
	mt = mergetool                    # fire up the merge tool

	# stash
	ss = stash                        # stash changes
	sl = stash list                   # list stashes
	sa = stash apply                  # apply stash (restore changes)
	sd = stash drop                   # drop stashes (destory changes)

	# status
	s = status -s                     # status short format
	st = status                       # status
	stat = status                     # status

	# tag
	t = tag -n                        # show tags with <n> lines of each tag message

	# View abbreviated SHA, description, and history graph of the latest 20 commits
	l = log --pretty=oneline -n 20 --graph --abbrev-commit

	# View the current working tree status using the short format
	s = status -s

	# Show the diff between the latest commit and the current state
	d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

	# `git di $number` shows the diff between the state `$number` revisions ago and the current state
	di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

	# Pull in remote changes for the current repository and all its submodules
	p = !"git pull; git submodule foreach git pull origin master"

	# Clone a repository including all submodules
	c = clone --recursive

	# Commit all changes
	ca = !git add -A && git commit -av

	# Switch to a branch, creating it if necessary
	go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

	# Show verbose output about tags, branches or remotes
	tags = tag -l
	branches = branch -a
	remotes = remote -v

	# List aliases
	aliases = config --get-regexp alias

	# Amend the currently staged files to the latest commit
	amend = commit --amend --reuse-message=HEAD

	# it an author on the latest commit
	credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

	# Interactive rebase with the given number of latest commits
	reb = "!r() { git rebase -i HEAD~$1; }; r"

	# Remove the old tag with this name and tag the latest commit with it.
	retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"

	# Find branches containing commit
	fb = "!f() { git branch -a --contains $1; }; f"

	# Find tags containing commit
	ft = "!f() { git describe --always --contains $1; }; f"

	# Find commits by source code
	fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

	# Find commits by commit message
	fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

	# Remove branches that have already been merged with master
	# a.k.a. ‘delete merged’
	dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

	# List contributors with number of commits
	contributors = shortlog --summary --numbered

	# Merge GitHub pull request on top of the current branch or,
	# if a branch name is specified, on top of the specified branch
	mpr = "!f() { \
		declare currentBranch=\"$(git symbolic-ref --short HEAD)\"; \
		declare branch=\"${2:-$currentBranch}\"; \
		if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
			git fetch origin refs/pull/$1/head:pr/$1 && \
			git checkout -B $branch && \
			git rebase $branch pr/$1 && \
			git checkout -B $branch && \
			git merge pr/$1 && \
			git branch -D pr/$1 && \
			git commit --amend -m \"$(git log -1 --pretty=%B)\n\nCloses #$1.\"; \
		fi \
	}; f"

[apply]
	# Detect whitespace errors when applying a patch
	whitespace = fix

[core]
	# Use custom `.gitignore` and `.gitattributes`
	excludesfile = ~/.gitignore_global
	attributesfile = ~/.gitattributes

	# Treat spaces before tabs and all kinds of trailing whitespace as an error
	# [default] trailing-space: looks for spaces at the end of a line
	# [default] space-before-tab: looks for spaces before tabs at the beginning of a line
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space

	# Make `git rebase` safer on macOS
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	trustctime = false

	# Prevent showing files whose names contain non-ASCII symbols as unversioned.
	# http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
	precomposeunicode = false

	# Speed up commands involving untracked files such as `git status`.
	# https://git-scm.com/docs/git-update-index#_untracked_cache
	untrackedCache = true

	editor = code --wait --new-window

[commit]
	verbose = true

[diff]
	# Detect copies as well as renames
	renames = copies
	tool = default-difftool

[difftool "default-difftool"]
cmd = code --wait --new-window --diff $LOCAL $REMOTE

[diff "bin"]
	# Use `hexdump` to diff binary files
	textconv = hexdump -v -C

[merge]
	# Include summaries of merged commits in newly created merge commit messages
	log = true

[push]
	# https://git-scm.com/docs/git-config#git-config-pushdefault
	default = simple
	# Make `git push` push relevant annotated tags when pushing branches out.
	followTags = true

[submodule]
	recurse = true

# URL shorthands

[url "git@github.com:"]
	insteadOf = "gh:"
	pushInsteadOf = "github:"
	pushInsteadOf = "git://github.com/"

[url "git://github.com/"]
	insteadOf = "github:"

[url "git@gist.github.com:"]
	insteadOf = "gst:"
	pushInsteadOf = "gist:"
	pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]
	insteadOf = "gist:"

[url "https://github.com"]
	insteadOf = "git://github.com"
